# -*- coding: utf-8; mode: structured-text -*-

= Apache Configuration =

Table Of Contents: @TOC@

== Basic Setup ==

When Wiking is installed successfully, you must configure Apache to use it for
serving your site.  This can be as simple as adding four lines into your site's
=VirtualHost= section.  An example follows:

-----
<VirtualHost *>
  ServerName www.yourdomain.com
  AddHandler mod_python .py
  PythonHandler wiking.handler
  ScriptAliasMatch .* wiking.py
  PythonOption dbname yourdbname
</VirtualHost>
-----

  * The =AddHandler= line says Apache to use mod_python to execute *.py files.

  * The =PythonHandler= directive instructs mod_python to use the module
    'wiking.handler' to handle all requests.  The module must be available in
    Python path.  See below how to set your python path.

  * The =ScriptAliasMatch= line says Apache to handle all URIs using
    'wiking.py'.  The file 'wiking.py' does not actually exist, but still
    causes Apache to use mod_python as set in =AddHandler=.

  * The =PythonOption= line sets the Wiking configuration option =dbname= to
    the name of the database used for www.yourdomain.com (you normally have a
    separate database for each Wiking site).  See below for more details about
    setting Wiking configuration options.

This basic setup should be sufficient for running the [cms].  Just reload
Apache and try pointing your browser to the corresponding URI.  On the first
try, the database will not be initialized, but Wiking will detect that and
guide you through the database initialization process.  This way you can
configure as many VirtualHosts as you wish.

If you want to run a different Wiking application instead of Wiking CMS or want
to customize Wiking CMS, you will also need to set the =modules= configuration
option (see below).


== Wiking Configuration Options ==

The chapter [config] describes the available options.  You can set each option
globally, you can use a site specific configuration file or you can pass the
values directly from the =VirtualHost= section of your Apache configuration using
the =PythonOption= directive.

The option =config_file= will set the name of the site specific configuration
file:
-----
  PythonOption config_file /etc/wiking/sites/yourdomain.py
-----

This way you can set all options specific for given site in the file
=\/etc/wiking/sites/yourdomain.py=.  They will take precedence over the values
defined in the global configuration file (such as =\/etc/wiking/config.py=) or
over the default values for options not set in the global file.

You may also override most options directly from the Apache configuration file
using the =PythonOption= directive.  These options will take the /highest
precedence/.  You can't, however, pass Python objects that way, so only
primitive types, such as strings, numbers, boolean values and sequences of
these types are supported.  

Examples:
-----
  PythonOption dbhost 10.0.0.122
  PythonOption dbport 5433
  PythonOption maintenance False
  PythonOption modules "wiking.biblio, wiking.cms, wiking.bts"
  PythonOption translation_path /usr/local/wiking-biblio/translations:/usr/local/wiking-bts/translations
  PythonOption resource_path /usr/local/wiking-biblio/resources
-----

/Important notes/:
  * The allowed values for boolean options are 'Yes', 'No', 'True', 'False',
    'On', 'Off' and are case insensitive.
  * String values must be enclosed in double quotes if they contain a space.
  * Sequence values may use a comma or colon to separate the items. Spaces
    betwen items are allowed, but remember to put quotes around.
  * =translation_path= defined in Apache config is /appended/ to the path defined
    by Wiking configuration files (or the default path).
  * =resource_path= defined in Apache config is /prepended/ to the path defined
    by Wiking configuration files (or the default path).


== Non-Wiking URIs == non-wiking-uris

You may wish to redirect certain URIs to ordinary files and directories.

-----
  Alias /img/ /var/www/mysite/img
-----

If you put this line prior to the =ScriptAliasMatch= line, all requests
beginning with =\/img\/= will be served by Apache directly and the request will
not be passed to Wiking.


== Modifying Python Path ==

You may need to modify the path used by Python to search for available modules
if your modules are in non-standard directories.  Python path may be specified
specifically for each virtual host:

-----
  PythonPath "['/usr/local/myproject/lib] + sys.path"
-----

== Running Wiking on a Public Hosting ==

In this special case you typically don't have privileges to write into the
system directories.  You have just one directory where you can upload your
files.  Thus you can't make a system-wide installation of Wiking or any of its
components.

You put all needed Python libraries (wiking, lcg, pytis and any other modules
not installed in the base system) into one directory
('\/var/www/sites/site1234/lib' in the example below) and set =PythonPath= to
this directory.  Then you need to upload other files needed by Wiking and
configure Wiking to use the appropriate directories (see [#config] for
description of all options).

Typical public hosting configuration example:
-----
<VirtualHost 100.10.20.30:80>

  ServerName www.yourdomain.com
  ServerAlias www.yourdomain.org

  Alias /data /var/www/sites/site1234/data

  AddHandler mod_python .py
  PythonHandler wiking.handler
  ScriptAliasMatch .* wiking.py

  PythonOption config_file /var/www/sites/site1234/config.py
  PythonPath "['/var/www/sites/site1234/lib]+sys.path"
  
</VirtualHost>
-----

This setup requires the webmaster to create the configuration just once and all
further setup can be done with privileges limited to the host's directory.
