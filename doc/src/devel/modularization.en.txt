# -*- coding: utf-8; mode: structured-text -*-

= Modularization =

The extensibility of Wiking is based on modularization.


Table Of Contents: @TOC@


== What is a Wiking Module ==

Wiking modules are implemented as Python classes.  Particular modules are
refered by their name and there are simple rules how their definitions are
located (see below).

Wiking handler creates instances of these classes and uses them for handling
requests.  These instances are persistent, so that one instance is typically
used for handling multiple requests.  Sharing of module instances is always
limited to just one virtual host.


== Request Processing Overview ==

As mentioned before, all requests are processed by the Wiking Handler.  This
handler, however, is only a very thin layer, which postpones most of the actual
functionality to modules.  

The central module, which controls the application behavior is the module named
'Application'.  Different stages of request processing, such as authentication,
uri resolution, handling errors etc. are controlled by different methods of the
application module, so a derived application may override any of these phases
by custom processing.  See [api] for details.

The most important phase of request processing is serving the actual content.
The application decides which module is responsible for handling the particular
request and the handler postpones the request to this module.  So you will
typically define different modules to handle different URIs.


== Predefined Modules ==

Wiking also provides a set of predefined modules, which implement various
common usecases for typical applications.  For example there is a module
implementing Cookie based authentication, module serving stylesheets from files
(including color theme substitution), module serving documents from static
files of structured text, etc.  Documentation for these modules is not yet
included in the manual, so please see the source code and the relevant Python
docstrings in files 'modules.py' and 'db.py'.


== How Wiking Locates Available Modules ==

/Note on terminology:/ The text below uses the term /module/ in two contexts.
One is for Wiking module -- a Python class implementing part of Wiking
functionality, other is for Python module -- a collection of Python definitions
and statements typically represented by a Python source file.  If we don't say
``Python module'' explicitely, Wiking module is meant.

The technique used for locating wiking modules is simple.  As described before,
Wiking always looks for modules by their name.  It first tries to import the
Python module named 'wikingmodules' and definition of a class with the
corresponding name within it.  If no such class is found within
'wikingmodules', Wiking uses the default implementation of the module.

You may easilly use custom set of modules for each virtual host by simply
modifying the Python path for each of them (see [apache] form more
information).

When the module 'wikingmodules' doesn't exist at all (in the current Python
path), Wiking automatically uses the modules of Wiking CMS.  This means, that
if you don't provide your own modules, you end up running the CMS on your
website.


== Adding Custom Modules to Wiking CMS ==

Given the information above, you can easilly add your custom modules to wiking
CMS or modify the existing modules to suit your needs.  Let's give an example
of `wikingmodules.py', which can be found within Python path of the
corresponding virtual host:

-----
import wiking.cms

class MyModule(wiking.cms.CMSModule, wiking.cms.Mappable):
      """My Wiking CMS module implementing fancy things."""
      WMI_SECTION = wiking.cms.WikingManagementInterface.SECTION_CONTENT
      ....

# Import the rest without poluting the namespace at the beginning...
from wiking.cms import * 
-----

Such a module will automatically become available in WMI.


